#!/usr/bin/env node

const esbuild = require("esbuild");
const sveltePlugin = require("esbuild-svelte");
const sveltePreprocess = require("svelte-preprocess");
const CryptoJS = require("crypto-js");
const cheerio = require("cheerio");
const fs = require("fs")

const isDev = process.env.NODE_ENV !== "production";

const needCryptBlogSlugs = [
    "d67271d8"
]

// 1. extract windi class and replace source html
// process windicss then concat it and mode.css
if (!isDev) {
    console.log("start process windi css")
    esbuild.buildSync({
        entryPoints: ["./windi.ts"],
        platform: 'node',
        format: "cjs",
        outfile: './windi.js',
    })
    const processWindi = require("./windi.js")
    processWindi().then(() => {
        require('fs').rmSync('./windi.js')
    })
    // concat windi.css and mode.css
    esbuild.build({
        entryPoints: ["assets/css/build.css"],
        bundle: true,
        minify: true,
        outfile: "static/main.css",
    })
        .catch(() => process.exit(1));
}
// 2.  encrypt blog
if (!isDev) {
    console.log("start encrypt blog")
    needCryptBlogSlugs.forEach(slug => {
        let html = fs.readFileSync(`public/posts/${slug}/index.html`).toString()
        const $ = cheerio.load(html);
        const cipherText = CryptoJS.AES.encrypt($("content").html(), $("content").data("password")).toString()
        $("content").html(cipherText);
        $("content").removeAttr("data-password");
        fs.writeFileSync(`public/posts/${slug}/test.html`, $.html());
    })
}
// 3. bundle all js files.
esbuild.build({
    entryPoints: ["assets/scripts/main.ts",],
    bundle: true,
    format: "iife",
    outfile: "static/bundle.js",
    watch: isDev,
    sourcemap: isDev,
    minify: !isDev,
    plugins: [sveltePlugin({
        preprocess: sveltePreprocess()
    })],
    logLevel: "info"
})
    .catch(() => process.exit(1));
esbuild.build({
    entryPoints: ["assets/scripts/workbox.js"],
    bundle: true,
    format: "iife",
    minify: !isDev,
    watch: isDev,
    outfile: "static/service-worker.js",
})
    .catch(() => process.exit(1));

